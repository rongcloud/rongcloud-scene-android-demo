plugins {
    id 'com.android.application'
}


static def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08:00"))
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // 写modes到BuildConfig
        buildConfigField("String[]", "RC_BUSI", "${modes()}")

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "融云 RTC-${versionName}-${releaseTime()}.apk"
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    flavorDimensions("environment")
    productFlavors {
        developerEnvironment {
            dimension 'environment'
            applicationId "cn.rongcloud.voiceroomdemo.dev" // 配置不同的包名，确保切换环境时不会因为缓存导致出现问题
            buildConfigField("String", "APP_KEY", "\"pvxdm17jpw7ar\"")
            buildConfigField("String", "BASE_SERVER_ADDRES", "\"https://rcrtc-api.rongcloud.net/\"")
            buildConfigField("Boolean", "INTERIAL", "false")// 区分国内/国际 国内环境不显示UI 选择地区

            buildConfigField("String", "BUSINESS_TOKEN", "\"这里是测试服务器token，需要申请 https://rcrtc-api.rongcloud.net/code\"")
            buildConfigField("String", "UM_APP_KEY", "\"这里是友盟AppKey\"")
            buildConfigField("String", "BUGLY_ID", "\"这里是Bugly的Id\"")
            buildConfigField("String", "MH_APP_KEY", "\"这里是美狐美颜SDK的appkey，要想体验美颜功能需要去美狐官网申请http://www.facegl.com/\"")
            manifestPlaceholders = [
                    APP_NAME         : "@string/app_name_test",
                    // hifive音乐服务的 appid和servercode
                    HIFIVE_APPID     : "替换您hifive音乐服务的appid",//可选替换
                    HIFIVE_SERVERCODE: "替换您hifive音乐服务的servercode"//可选替换
            ]
        }
        releaseEnvironment {
            dimension 'environment'
            applicationId "cn.rongcloud.voiceroomdemo"
            buildConfigField("String", "APP_KEY", "\"xxxx\"")
            buildConfigField("String", "UM_APP_KEY", "\"xxxx\"")
            buildConfigField("String", "BASE_SERVER_ADDRES", "\"xxxx\"")
            buildConfigField("String", "BUGLY_ID", "\"xxxxx\"")
            buildConfigField("String", "MH_APP_KEY", "\"xxxxx\"")
            buildConfigField("String", "BUSINESS_TOKEN", "\"xxxxx\"")
            buildConfigField("Boolean", "INTERIAL", "false")
            manifestPlaceholders = [
                    APP_NAME         : "@string/app_name",
                    // hifive音乐服务的 appid和servercode
                    HIFIVE_APPID     : "xxx",
                    HIFIVE_SERVERCODE: "xxx"
            ]
        }
    }
}

dependencies {
    implementation fileTree(includes: ['*.aar'], dir: 'libs')
    implementation android_ui.appcompat
    implementation android_ui.material
    annotationProcessor "com.alibaba:arouter-compiler:$arouter"
    api 'com.tencent.bugly:crashreport:latest.release'
    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    api 'com.tencent.bugly:nativecrashreport:latest.release'

    // config
    implementation project(path: ':middle:config')
    // 登录设置模块
    implementation project(path: ':business:profile')
    // 实时社区
    implementation project(path: ':business:community')
    // 模块条件编译
    if (!containMode(rootProject.ext.mode_live)
            && !containMode(rootProject.ext.mode_voice)
            && !containMode(rootProject.ext.mode_radio)) {
        // 只有call 兼容编译
        implementation project(path: ':middle:roomkit')
        implementation project(path: ':middle:music')
    } else {
        if (containMode(rootProject.ext.mode_voice)) {
            api project(path: ':business:voiceroom')
        }
        if (containMode(rootProject.ext.mode_radio)) {
            api project(path: ':business:radio')
        }
        if (containMode(rootProject.ext.mode_call)) {
            api project(path: ':business:call')
        }
        if (containMode(rootProject.ext.mode_live)) {
            api project(path: ':business:live')
        }
    }
}

def containMode(mode) {
    for (String temp in rootProject.ext.rc_busi) {
        if (mode.equals(temp)) {
            return true
        }
    }
    return false
}


def modes() {
    String busi = ""
    for (String temp in rootProject.ext.rc_busi) {
        busi += "\"${temp}\","
    }
    return "new String[]{" + busi.substring(0, busi.length() - 1) + "}"
}